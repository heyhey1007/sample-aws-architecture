AWSTemplateFormatVersion: 2010-09-09
Description: >-
  VPC Network resource
  VPC, Subnet, RouteTable 
Parameters:
  SysName:
    Type: String
    Default: mySystem
  VpcCidr: 
    Type: String
    Default: 10.0.0.0/16
  PublicSubnetCidr: 
    Type: String
    Default: 10.0.1.0/24
  PrivateSubnetCidr: 
    Type: String
    Default: 10.0.2.0/24
Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      # サブネットマスク(CIDRブロック設定)
      CidrBlock: !Ref VpcCidr
      # DNS 解決
      EnableDnsSupport: true
      # DNS ホスト名使用 
      EnableDnsHostnames: true
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Sub ${SysName}-vpc


  ########################################
  # サブネット設定
  # パブリックサブネット x 2  
  # プライベートサブネット x 2
  #######################################

  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnetCidr
      AvailabilityZone: !Select 
        - 0
        - !GetAZs ''
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: Public
        - Key: Name
          Value: !Sub ${SysName}-public-subnet-1
    Metadata:
      'AWS::CloudFormation::Designer':
        id: abe971f8-108a-434b-bea1-e9993545ab4e

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnetCidr
      AvailabilityZone: !Select 
        - 0
        - !GetAZs ''
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: private
        - Key: Name
          Value: !Sub ${SysName}-private-subnet-1

  # IGWの設置
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Sub ${SysName}-igw

  # VPCにIGWをアタッチメント
  GatewayToInternet:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway


  ###########################
  #   ルートテーブル関連
  ##########################
  # ルートテーブルを設置
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Name
          Value: !Sub ${SysName}-public-rtb

  # ルートテーブルにIGWを関連付け 
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn:
      - GatewayToInternet
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Application
          Value: !Ref 'AWS::StackId'
        - Key: Network
          Value: Private
        - Key: Name
          Value: !Sub ${SysName}-private-rtb-1

  ############################
  # publicSubnetへのルーティング#
  ############################
  # PublicSubnetをルートテーブルに関連付け
  PublicSubnetRouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  ############################
  # privateSubnetへのルーティング#
  ############################
  PrivateSubnetRouteTableAssociation1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable

  ###########################
  # サブネットへのアクセス制限(NetworkACL)
  # ACLでのアクセス制御は行わない
  ###########################
  # PublicNetworkAcl:
  #   Type: 'AWS::EC2::NetworkAcl'
  #   Properties:
  #     VpcId: !Ref VPC
  #     Tags:
  #       - Key: Application
  #         Value: !Ref 'AWS::StackId'
  #       - Key: Network
  #         Value: Public

  # # http:80アクセスを許可するACLエントリ(ルール)
  # InboundHTTPPublicNetworkAclEntry:
  #   Type: 'AWS::EC2::NetworkAclEntry'
  #   Properties:
  #     NetworkAclId: !Ref PublicNetworkAcl
  #     RuleNumber: 100
  #     Protocol: 6
  #     RuleAction: allow
  #     Egress: false
  #     CidrBlock: 0.0.0.0/0
  #     PortRange:
  #       From: 80
  #       To: 80
  #   Metadata:
  #     'AWS::CloudFormation::Designer':
  #       id: 745056f2-66ec-4cc3-9a09-74aa2b695ceb
  # # http:443アクセスを許可するACLエントリ(ルール)
  # InboundHTTPSPublicNetworkAclEntry:
  #   Type: 'AWS::EC2::NetworkAclEntry'
  #   Properties:
  #     NetworkAclId: !Ref PublicNetworkAcl
  #     RuleNumber: 101
  #     Protocol: 6
  #     RuleAction: allow
  #     Egress: false
  #     CidrBlock: 0.0.0.0/0
  #     PortRange:
  #       From: 443
  #       To: 443
  # # 1024-65535 (全て)アクセスを許可するACLエントリ(ルール)
  # InboundDynamicPortPublicNetworkAclEntry:
  #   Type: 'AWS::EC2::NetworkAclEntry'
  #   Properties:
  #     NetworkAclId: !Ref PublicNetworkAcl
  #     RuleNumber: 103
  #     Protocol: 6
  #     RuleAction: allow
  #     Egress: false
  #     CidrBlock: 0.0.0.0/0
  #     PortRange:
  #       From: 1024
  #       To: 65535
  #   Metadata:
  #     'AWS::CloudFormation::Designer':
  #       id: 45bf1378-8cea-4e92-9d37-54fed4f776af
  # # SSH接続ポートのACL設定エントリ(ルール)
  # InboundSSHPublicNetworkAclEntry:
  #   Type: 'AWS::EC2::NetworkAclEntry'
  #   Properties:
  #     NetworkAclId: !Ref PublicNetworkAcl
  #     RuleNumber: 102
  #     Protocol: 6
  #     RuleAction: allow
  #     Egress: false
  #     CidrBlock: 0.0.0.0/0
  #     PortRange:
  #       From: 22
  #       To: 22
  #   Metadata:
  #     'AWS::CloudFormation::Designer':
  #       id: 6e2635d7-5612-4fbf-8746-60571a0e5f4c
  # # 外向けのネットワークは全て許可エントリ(ルール)
  # OutboundPublicNetworkAclEntry:
  #   Type: 'AWS::EC2::NetworkAclEntry'
  #   Properties:
  #     NetworkAclId: !Ref PublicNetworkAcl
  #     RuleNumber: 100
  #     Protocol: 6
  #     RuleAction: allow
  #     Egress: true
  #     CidrBlock: 0.0.0.0/0
  #     PortRange:
  #       From: 0
  #       To: 65535

  # # ACLをSubnet関連付け
  # PublicSubnetNetworkAclAssociation1:
  #   Type: 'AWS::EC2::SubnetNetworkAclAssociation'
  #   Properties:
  #     SubnetId: !Ref PublicSubnet
  #     NetworkAclId: !Ref PublicNetworkAcl
  #   Metadata:
  #     'AWS::CloudFormation::Designer':
  #       id: 44c6c7d6-a3bc-4ae6-8027-4b19f4287490
    
Outputs:
  # VPCのIDを出力(cross-stack参照)
  VPCID:
    Description: VPC ID
    Value: !Ref VPC
    Export:
      Name: !Sub ${AWS::StackName}-VpcId

  PublicSubnet:
    Description: PublicSubnet
    Value: !Ref PublicSubnet
    Export:
      Name: !Sub ${AWS::StackName}-public-subnet-1


  PrivateSubnet:
    Description: PrivateSubnet
    Value: !Ref PrivateSubnet
    Export:
      Name: !Sub ${AWS::StackName}-private-subnet-1


  PrivateRouteTable:
    Description: PrivateRouteTable
    Value: !Ref PrivateRouteTable
    Export:
      Name: !Sub ${AWS::StackName}-private-rtb-1
